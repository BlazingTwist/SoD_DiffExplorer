onlineSourcesConfig:
  baseUrl: http://media.schoolofdragons.com/DWADragonsUnity
  platform: Steam
  version: 3.15.0
  baseUrlSuffix: High
  dataType: xmlFile
  onlineSourceConfig: !!directOnlineSourceConfig
    dataContainer: data/AssetVersionsDO.xml


downloadSettings:
  #if set to true it will wait for user input when a file throws an exception during downloading
  #if set to false it will ignore all failed downloads apart from logging them
  pauseDownloadOnError: True

  #if set to false it won't download the files and instead only log which files it would download
  doDownload: True

  targetDirectory: fileDownloads

  #if set to false it will download directly to the baseDirectory
  #if set to true it will append the platform/version/date as subdirectories
  # example:
  #  platform = true, version = false, date = true
  #  will result in
  #  fileDownloads\Steam\2020.04.07
  appendPlatform: True
  appendVersion: True
  appendDate: False


interpreterConfig:
  configPath: A

  #path to the value that will be used as a fileName to download
  #value will be rewritten as url for download using pattern: baseUrl/platform/version/baseUrlSuffix/value
  fileNamePath: "@N"

  #additional pathConstraints to limit amount of matches
  pathConstraints: []

  #use this to filter filenames
  #filterexamples:
  #  allow all files of any directory with a name starting with "dw" and ending with "do" (e.g. 'RS_SHARED/dwthunderdrumdo')
  #    ^(.*?)/dw(.*?)do$
  #
  #  use multiple regex filters (only allows files that match ALL filters)
  #    regexFilters:
  #    - filter1
  #    - !filter2
  #    - \!filter3
  #
  #  to negate a regex (allowing only files that don't match it) start the filter with an '!' character (see above)
  #  if your regex starts with an '!' for other reasons you can escape the negation by putting a '\' in front of it
  fileNameRegexFilters: []

  subFilter:
    basePath: V
    valuePath: "@L"
    pathType: relative

    #Okay, wtf does this do?
    # it's taking the value at fileNamePath and replaces the Regex with the Replacement
    # in this case it's looking either for a value `fileName` or `fileName.extension`
    # which then gets replaces with `fileName.filterValue` or `fileName.filterValue.extension`
    #  the replacement is mostly valid regex except for the ${value}, which is a camel-inspired expression
    #  it will be replaced with whatever the value for this filters path is
    fileNameModifierRegex: "^((.*)(\\..*)|(.*))$"
    fileNameModifierReplacement: "$2$4.${value}$3"

    #if set to optional, only values that have the filterPath and are not matching the regexFilters are discarded
    #if set to required, both values not containing the filterPath and values not matching the regexFilters are discarded
    optional: false

    #use this to only download some localizations
    #otherwise downloads ALL localizations available
    #filterexamples:
    # allow only en-us and de-de localized files (and files that are not localized, if set to optional)
    #   localeFilters:
    #   - en-us
    #   - de-de
    valueRegexFilters:
    - "!(en-us)|(de-de)"
